import React, { useEffect, useState } from 'react';
import { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';
import { saveAs } from 'file-saver';
import '../index.css'
import "../css/rfm.css";
import { Button, Box } from "@mui/material";
import { useResultContext } from '../context/ResultContext';
const RFMPage = () => {
  
    const { data } = useResultContext();
  const [distributions, setDistributions] = useState({});
  const [customerData, setCustomerData] = useState([]);
  const [hasRFMDetails,setHasRFMDetails] = useState(false)
  const explanationMap = {recency_distribution: {
    title: "Recency Score Meaning",
    description:"The number of days since each customer's last purchase.",
    points: [
      "5 = Purchased very recently (within 30 days)",
      "4 = Purchased within 30–60 days",
      "3 = Purchased within 60–90 days",
      "2 = Purchased within 90–120 days",
      "1 = No purchase for over 120 days"
    ]
  },
  frequency_distribution: {
    title: "Frequency Score Meaning",
    description:"The number of unique orders made by each customer.",
    points: [
      "5 = Very frequent purchases",
      "4 = Frequent purchases",
      "3 = Moderate frequency",
      "2 = Few purchases",
      "1 = Only one purchase"
    ]
  },
  monetary_distribution: {
    title: "Monetary Score Meaning",
    description:"The total revenue generated by each customer.",
    points: [
      "5 = Top spenders",
      "4 = High spending",
      "3 = Moderate spending",
      "2 = Low spending",
      "1 = Very low spenders"
    ]
  },
  customer_rating_distribution: {
    title: "Customer Rating Summary",
    description:"Overall rating of the customers based on the RFM score.",
    points: [
      "5 = High value, loyal customers",
      "4 = Valuable and regular buyers",
      "3 = Average customers",
      "2 = Low engagement",
      "1 = At-risk or inactive customers"
      ]
  }
}

useEffect(()=>{
 if(Object.keys(data).length>0)
 {
   if (data.rfm_result?.message === "No customer_id column in data."){
     setHasRFMDetails(false)
   }
   else{
     
     console.log(hasRFMDetails)
     setDistributions(data.rfm_result.distributions);
     const merged = Object.entries(data.rfm_result.customer_rfm).map(([id, scores]) => ({
       customer_id: id,
       RecencyScore: scores.RecencyScore,
       FrequencyScore: scores.FrequencyScore,
       MonetaryScore: scores.MonetaryScore,
       CustomerRating: scores.CustomerRating
     }));
     setCustomerData(merged);
     setHasRFMDetails(true)
   }

 }else{
  setHasRFMDetails(false)
 }
},[data])
  // useEffect(() => {
  //   fetch('../ml/rfm_data.json') // Adjust path if needed
  //     .then(res => res.json())
  //     .then(data => {
  //       if (data?.message === "No customer details found"){
  //         setHasRFMDetails(false)
  //       }
  //       else{
  //         setHasRFMDetails(true)
  //         console.log(hasRFMDetails)
  //         setDistributions(data.distributions);
  //         const merged = Object.entries(data.customer_rfm).map(([id, scores]) => ({
  //           customer_id: id,
  //           RecencyScore: scores.RecencyScore,
  //           FrequencyScore: scores.FrequencyScore,
  //           MonetaryScore: scores.MonetaryScore,
  //           CustomerRating: scores.CustomerRating
  //         }));
  //         setCustomerData(merged);

  //       }
  //     });
  // }, []);

  const prepareChartData = (scoreObj) => {
    return Object.entries(scoreObj).map(([score, count]) => ({
      score,
      count
    }));
  };

  const handleExport = () => {
    const header = "customer_id,RecencyScore,FrequencyScore,MonetaryScore,CustomerRating\n";
    const rows = customerData.map(row =>
      `${row.customer_id},${row.RecencyScore},${row.FrequencyScore},${row.MonetaryScore},${row.CustomerRating}`
    ).join("\n");

    const csvBlob = new Blob([header + rows], { type: 'text/csv;charset=utf-8;' });
    saveAs(csvBlob, 'rfm_customer_scores.csv');
  };

  return (
    <div className="rfm-container">
    <div className="rfm-title-bar">
      <h1 className="rfm-title">RFM Analysis & Customer Ratings</h1>
      {
        hasRFMDetails && (
      <Button variant="contained" onClick={handleExport}>
        Export Customer Data
      </Button>
        )
      }
    </div>
      {
        hasRFMDetails ? (
        <div className="rfm-chart-grid">
          {["recency_distribution", "frequency_distribution", "monetary_distribution", "customer_rating_distribution"].map((key) => (
            <div key={key} className="rfm-chart-explanation-pair">
              <div className="rfm-chart-card">
                <h2>{key.replace("_", " ").replace(/distribution/i, '').toUpperCase()}</h2>
                <ResponsiveContainer width="100%" height={250}>
                  <BarChart data={prepareChartData(distributions[key] || {})}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="score" />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="count" fill="#8884d8" />
                  </BarChart>
                </ResponsiveContainer>
              </div>

              <div className="rfm-explanation">
                <h3>{explanationMap[key].title}</h3>
                <p>{explanationMap[key].description}</p>
                <ul>
                  {explanationMap[key].points.map((point, index) => (
                    <li key={index}>{point}</li>
                  ))}
                </ul>
              </div>
            </div>
          ))}
        </div>
        ) :
        <p>No Customer Details Found <br/>
        Add customer_id in the data to get the RFM and Overall Ratings of your customers</p>
      }
  </div>
  );
};

export default RFMPage;
